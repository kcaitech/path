import { OpType } from "../src/basic";
import { Path } from "../src/path";
import { PathBuilder } from "../src/pathbuilder";

describe(`path 2`, () => {
    test('coin union', () => {

        const builder = new PathBuilder();
        builder.moveTo(50, 100)
        builder.cubicTo(100, 50, 77.58923888895069, 100, 100, 77.58923888895069)
        builder.cubicTo(50, 0, 100, 22.4107611110493, 77.58923888895069, 0)
        builder.cubicTo(0, 50, 22.4107611110493, 0, 0, 22.4107611110493)
        builder.cubicTo(50, 100, 0, 77.58923888895069, 22.4107611110493, 100)
        builder.close()

        const path = builder.getPath();

        builder.moveTo(50, 100)
        builder.cubicTo(100, 50, 77.58923888895069, 100, 100, 77.58923888895069)
        builder.cubicTo(50, 0, 100, 22.4107611110493, 77.58923888895069, 0)
        builder.cubicTo(0, 50, 22.4107611110493, 0, 0, 22.4107611110493)
        builder.cubicTo(50, 100, 0, 77.58923888895069, 22.4107611110493, 100)
        builder.close()

        const path1 = builder.getPath();

        path.op(path1, OpType.Union)
        expect(path.toSVGString()).toBe(path1.toSVGString())
    })

    test('multi union', () => {
        const builder = new PathBuilder();
        builder.moveTo(50, 100)
        builder.cubicTo(100, 50, 77.58923888895069, 100, 100, 77.58923888895069)
        builder.cubicTo(50, 0, 100, 22.4107611110493, 77.58923888895069, 0)
        builder.cubicTo(0, 50, 22.4107611110493, 0, 0, 22.4107611110493)
        builder.cubicTo(50, 100, 0, 77.58923888895069, 22.4107611110493, 100)
        builder.close()
        const path0 = builder.getPath();

        const path1 = path0.clone();
        const path2 = path0.clone();

        path1.translate(-30, 30)
        path2.translate(30, 30)

        path0.op(path1, OpType.Union)
        path0.op(path2, OpType.Union)

        expect(path0.equals(new Path('M97.02157755835391 32.97842251628198C90.04994966666044 13.754759851204161 71.61413813476562 0 50 0' +
            'C28.385861916623327 0 9.950050421004146 13.754759785798562 2.9784224913725366 32.97842237916561C-16.24524014879584 39.95005033333956 -30 58.38586186523436 -30 80' +
            'C-30 107.58923888895069 -7.5892388889507 130 20 130C31.250681130474213 130 41.64020927940106 126.27321105211986 49.99999995918662 119.98821763162861' +
            'C58.359790618869816 126.27321101562899 68.74931881444523 130 80 130C107.58923888895069 130 130 107.58923888895069 130 80' +
            'C130 58.38586191662333 116.24524021420143 39.95005042100414 97.02157755835391 32.97842251628198Z'))).toBe(true)
    })

    test('point', () => {
        const path0 = new Path('M0.155099025676379 3.8812735568349095L0.155099025676379 3.8812735568349095C-0.03728889027369808 4.054500414430392 -0.052821997130917064 4.350889749558076 0.12040486046456522 4.543277665508153L2.3286183487905014 6.995747201057565C2.5018452063859837 7.188135117007643 2.7982345415136676 7.203668223864861 2.9906224574637443 7.030441366269379L2.9906224574637443 7.030441366269379C3.183010373413822 6.857214508673897 3.1985434802710406 6.560825173546213 3.0253166226755583 6.368437257596136L0.8171031343496223 3.9159677220467235C0.64387627675414 3.7235798060966463 0.3474869416264561 3.708046699239427 0.155099025676379 3.8812735568349095Z')
        path0.bbox();
    })

    test('accuracy', () => {
        const oval1 = new Path('M50 100C77.58923888895069 100 100 77.58923888895069 100 50C100 22.4107611110493 77.58923888895069 0 50 0C22.4107611110493 0 0 22.4107611110493 0 50C0 77.58923888895069 22.4107611110493 100 50 100Z');
        const oval2 = oval1.clone();
        const oval3 = oval1.clone();
        const oval4 = oval1.clone();
        // const rect1 = new Path('M0 0L100 0L100 100L0 100L0 0Z');
        oval1.translate(72, 31);
        oval2.translate(87, 63);
        oval3.translate(28, 54);
        oval4.translate(48, 121);
        // rect1.translate(160, 121);
        oval1.op(oval2, OpType.Union)
        oval1.op(oval3, OpType.Union)
        oval1.op(oval4, OpType.Union)
        // oval1.op(rect1, OpType.Union)

        // expect(oval1.toSVGString()).toBe('M186.3618165167063 120.99999999999999C186.78175187523752 118.3948047475298 187 115.72261778386523 187 113' +
        //     'C187 98.95769601084292 181.19430912780803 86.25691902373791 171.85508669793938 77.16982835320024C169.89523135832727 51.36617919003886 148.30063273721385 31 122 31' +
        //     'C104.33670926778383 31 88.7960075505586 40.185872256687865 79.89997774898919 54.03553386939869C79.26954590224264 54.0119150434853 78.63614956183984 54 78 54' +
        //     'C50.4107611110493 54 28 76.4107611110493 28 104C28 122.79246018841117 38.39787146821118 139.1822734489115 53.74765268471179 147.72347806157921' +
        //     'C50.078076006811536 154.67775195748987 48 162.59878439129864 48 171C48 198.5892388889507 70.4107611110493 221 98 221C125.58923888895069 221 148 198.5892388889507 148 171' +
        //     'C148 167.9137610141244 147.71956237981684 164.89232303955802 147.18280908466863 161.95980802151902' +
        //     'C151.70831751951923 161.02140113293163 156.01099067195995 159.47024103240778 159.99999999999994 157.39715614029606L160 221L260 221L260 121Z')


        expect(oval1.equals(new Path('M147.1828090169501 161.9598079675953C169.89862053409115 157.249470384423 187 137.10055192366568 187 113' +
            'C187 98.95769601084292 181.19430912780803 86.25691902373791 171.85508667136273 77.16982837813899C169.89523135832727 51.36617919003886 148.30063273721385 31 122 31' +
            'C104.33670926778383 31 88.7960075505586 40.185872256687865 79.89997774898919 54.03553386939869C79.26954590224264 54.0119150434853 78.63614956183984 54 78 54C50.4107611110493 54 28 76.4107611110493 28 104' +
            'C28 122.79246018841117 38.39787146821118 139.1822734489115 53.74765268471179 147.72347806157921C50.078076006811536 154.67775195748987 48 162.59878439129864 48 171' +
            'C48 198.5892388889507 70.4107611110493 221 98 221C125.58923888895069 221 148 198.5892388889507 148 171' +
            'C148 167.9137610141244 147.71956237981684 164.89232303955802 147.1828090169501 161.9598079675953Z'))).toBe(true)
    })

    test('polygon', () => {
        const star1 = new Path('M90 0L103.6896940273958 76.29692366819259L175.59508646656383 66.67986004281757L112.15039023191285 104.21688848144187L142.9006727063226 174.57013995718242L90 121.47237570073104L37.099327293677426 174.57013995718242L67.84960976808713 104.21688848144187L4.404913533436172 66.6798600428176L76.31030597260418 76.2969236681926L90 0Z')
        const oval = new Path('M50 100C77.58923888895069 100 100 77.58923888895069 100 50C100 22.4107611110493 77.58923888895069 0 50 0C22.4107611110493 0 0 22.4107611110493 0 50C0 77.58923888895069 22.4107611110493 100 50 100Z')
        const polygon = new Path('M53.5 0L99.83235910246748 91.49999999999999L7.1676408975325465 91.50000000000003L53.5 0Z')
        oval.translate(80, 96)
        polygon.translate(90, 173)

        star1.op(oval, OpType.Union)
        expect(star1.equals(new Path('M90 0L103.6896940273958 76.29692366819259L175.59508646656383 66.67986004281757L125.7344482166964 96.17988616054097' +
            'C127.14063356839179 96.06077321053637 128.56329531984903 96 130 96C157.5892388889507 96 180 118.4107611110493 180 146C180 173.5892388889507 157.5892388889507 196 130 196' +
            'C102.4107611110493 196 80 173.5892388889507 80 146C80 139.74996590284067 81.1501167811795 133.76569048133797 83.25000888664421 128.2475151923862' +
            'L37.099327293677426 174.57013995718242L67.84960976808713 104.21688848144187L4.404913533436172 66.6798600428176L76.31030597260418 76.2969236681926Z'))).toBe(true)
        star1.op(polygon, OpType.Union)
        expect(star1.equals(new Path('M90 0L103.6896940273958 76.29692366819259L175.59508646656383 66.67986004281757L125.7344482166964 96.17988616054097' +
            'C127.14063356839179 96.06077321053637 128.56329531984903 96 130 96C157.5892388889507 96 180 118.4107611110493 180 146C180 165.5184638075918 168.78321399741878 182.44505325777033 152.4514785259677 190.67793181682435' +
            'L189.83235910246748 264.5L97.16764089753255 264.5L131.87106341799657 195.96554110055337C131.25017977398034 195.9884464630652 130.6264247308622 196 130 196C102.4107611110493 196 80 173.5892388889507 80 146' +
            'C80 139.74996590284067 81.1501167811795 133.76569048133797 83.25000888664421 128.2475151923862' +
            'L37.099327293677426 174.57013995718242L67.84960976808713 104.21688848144187L4.404913533436172 66.6798600428176L76.31030597260418 76.2969236681926Z'))).toBe(true)
    })
})