import { OpType } from "../src/basic";
import { Path } from "../src/path";
import { PathBuilder } from "../src/pathbuilder"

describe(`path`, () => {
    test('build', () => {
        const builder = new PathBuilder();
        builder.moveTo(0, 0);
        builder.lineTo(100, 0);
        builder.lineTo(100, 100);
        builder.lineTo(0, 100);
        builder.close();
        const path = builder.getPath();
        const str = path.toSVGString();
        expect(str).toBe('M0 0L100 0L100 100L0 100Z')
    })
    test('op difference', () => {
        const builder = new PathBuilder();
        builder.moveTo(0, 0);
        builder.lineTo(100, 0);
        builder.lineTo(100, 100);
        builder.lineTo(0, 100);
        builder.close();
        const path = builder.getPath();

        builder.moveTo(25, 25);
        builder.lineTo(125, 25);
        builder.lineTo(125, 125);
        builder.lineTo(25, 125);
        builder.close();

        const path1 = builder.getPath();

        path.op(path1, OpType.Difference);

        expect(path.toSVGString()).toBe('M0 0L100 0L100 25L25 25L25 100L0 100Z')
    })

    test('op union', () => {
        const builder = new PathBuilder();
        builder.moveTo(0, 0);
        builder.lineTo(100, 0);
        builder.lineTo(100, 100);
        builder.lineTo(0, 100);
        builder.close();
        const path = builder.getPath();

        builder.moveTo(25, 25);
        builder.lineTo(125, 25);
        builder.lineTo(125, 125);
        builder.lineTo(25, 125);
        builder.close();

        const path1 = builder.getPath();

        path.op(path1, OpType.Union);

        expect(path.toSVGString()).toBe('M0 0L100 0L100 25L125 25L125 125L25 125L25 100L0 100Z')
    })

    test('op intersection', () => {
        const builder = new PathBuilder();
        builder.moveTo(0, 0);
        builder.lineTo(100, 0);
        builder.lineTo(100, 100);
        builder.lineTo(0, 100);
        builder.close();
        const path = builder.getPath();

        builder.moveTo(25, 25);
        builder.lineTo(125, 25);
        builder.lineTo(125, 125);
        builder.lineTo(25, 125);
        builder.close();

        const path1 = builder.getPath();

        path.op(path1, OpType.Intersection);

        expect(path.toSVGString()).toBe('M100 25L100 100L25 100L25 25Z')
    })

    test('op', () => {
        // M50 100C77.58923888895069 100 100 77.58923888895069 100 50C100 22.4107611110493 77.58923888895069 0 50 0C22.4107611110493 0 0 22.4107611110493 0 50C0 77.58923888895069 22.4107611110493 100 50 100Z
        // M37.5 75C58.191929166713024 75 75 58.191929166713024 75 37.5C75 16.808070833286973 58.191929166713024 0 37.5 0C16.808070833286973 0 0 16.808070833286973 0 37.5C0 58.191929166713024 16.808070833286973 75 37.5 75Z

        const builder = new PathBuilder();
        builder.moveTo(50, 100)
        builder.cubicTo(100, 50, 77.58923888895069, 100, 100, 77.58923888895069)
        builder.cubicTo(50, 0, 100, 22.4107611110493, 77.58923888895069, 0)
        builder.cubicTo(0, 50, 22.4107611110493, 0, 0, 22.4107611110493)
        builder.cubicTo(50, 100, 0, 77.58923888895069, 22.4107611110493, 100)
        builder.close()
        const path = builder.getPath();
        const p1str = 'M50 100C77.58923888895069 100 100 77.58923888895069 100 50' +
            'C100 22.4107611110493 77.58923888895069 0 50 0C22.4107611110493 0 0 22.4107611110493 0 50' +
            'C0 77.58923888895069 22.4107611110493 100 50 100Z'
        expect(path.toSVGString()).toBe(p1str);

        builder.moveTo(50.5, 88)
        builder.cubicTo(88, 50.5, 71.19192916671302, 88, 88, 71.19192916671302)
        builder.cubicTo(50.5, 13, 88, 29.808070833286973, 71.19192916671302, 13)
        builder.cubicTo(13, 50.5, 29.808070833286973, 13, 13, 29.808070833286973)
        builder.cubicTo(50.5, 88, 13, 71.19192916671302, 29.808070833286973, 88)
        builder.close()
        const path1 = builder.getPath();
        const p2str = 'M50.5 88C71.19192916671302 88 88 71.19192916671302 88 50.5C88 29.808070833286973 71.19192916671302 13 50.5 13' +
            'C29.808070833286973 13 13 29.808070833286973 13 50.5C13 71.19192916671302 29.808070833286973 88 50.5 88Z'
        expect(path1.equals(new Path(p2str))).toBe(true)

        path.op(path1, OpType.Difference);
        expect(path.equals(new Path(p1str + p2str))).toBe(true);
    })

    function opcase() {
        const builder = new PathBuilder();
        builder.moveTo(50, 100)
        builder.cubicTo(100, 50, 77.58923888895069, 100, 100, 77.58923888895069)
        builder.cubicTo(50, 0, 100, 22.4107611110493, 77.58923888895069, 0)
        builder.cubicTo(0, 50, 22.4107611110493, 0, 0, 22.4107611110493)
        builder.cubicTo(50, 100, 0, 77.58923888895069, 22.4107611110493, 100)
        builder.close()
        builder.moveTo(50.5, 88)
        builder.cubicTo(88, 50.5, 71.19192916671302, 88, 88, 71.19192916671302)
        builder.cubicTo(50.5, 13, 88, 29.808070833286973, 71.19192916671302, 13)
        builder.cubicTo(13, 50.5, 29.808070833286973, 13, 13, 29.808070833286973)
        builder.cubicTo(50.5, 88, 13, 71.19192916671302, 29.808070833286973, 88)
        builder.close()
        const path = builder.getPath();
        builder.moveTo(81, 96)
        builder.cubicTo(96, 81, 89.2767716666852, 96, 96, 89.2767716666852)
        builder.cubicTo(81, 66, 96, 72.7232283333148, 89.2767716666852, 66)
        builder.cubicTo(66, 81, 72.7232283333148, 66, 66, 72.7232283333148)
        builder.cubicTo(81, 96, 66, 89.2767716666852, 72.7232283333148, 96)
        builder.close()
        const path1 = builder.getPath();
        return { path, path1 }
    }

    test('op difference', () => {
        const { path, path1 } = opcase();
        path.op(path1, OpType.Difference);
        expect(path.equals(new Path('M50 100C58.543851685206164 100 66.59107665398336 97.85076171404083 73.62989318592405 94.06406686253004' +
            'C70.04610112845467 92.03587220961002 67.37695418130508 88.57567087267265 66.40290333389096 84.46391376420284' +
            'C61.5734459361991 86.73204342730152 56.18321698725684 88 50.5 88C29.808070833286973 88 13 71.19192916671302 13 50.5' +
            'C13 29.808070833286973 29.808070833286973 13 50.5 13C71.19192916671302 13 88 29.808070833286973 88 50.5' +
            'C88 56.18321702579856 86.73204341010378 61.57344600930864 84.46391376101742 66.40290341982417' +
            'C88.57567094985656 67.37695422546793 92.03587227221678 70.04610119087596 94.06406685749438 73.62989329046925' +
            'C97.85076168818667 66.59107675078712 100 58.54385173659512 100 50C100 22.4107611110493 77.58923888895069 0 50 0' +
            'C22.4107611110493 0 0 22.4107611110493 0 50C0 77.58923888895069 22.4107611110493 100 50 100Z'))).toBe(true)
    })

    test('op union', () => {
        const { path, path1 } = opcase();
        path.op(path1, OpType.Union);
        // console.log(path.toSVGString())
        expect(path.equals(new Path('M50 100C58.543851685206164 100 66.59107665398336 97.85076171404083 73.62989318592405 94.06406686253004' +
            'C75.80730647787242 95.29634193743135 78.32235574033282 96 81 96C89.2767716666852 96 96 89.2767716666852 96 81' +
            'C96 78.3223557711662 95.29634195363676 75.80730653579458 94.06406685749438 73.62989329046925C97.85076168818667 66.59107675078712 100 58.54385173659512 100 50' +
            'C100 22.4107611110493 77.58923888895069 0 50 0C22.4107611110493 0 0 22.4107611110493 0 50C0 77.58923888895069 22.4107611110493 100 50 100ZM50.5 88' +
            'C56.18321698725684 88 61.5734459361991 86.73204342730152 66.40290332156877 84.46391380716257C66.13944862347412 83.35179340499151 66 82.19200797141343 66 81' +
            'C66 72.7232283333148 72.7232283333148 66 81 66C82.19200800224681 66 83.35179346499129 66.13944863068829 84.46391385050369 66.40290335433512' +
            'C86.73204341010378 61.57344600930864 88 56.18321702579856 88 50.5C88 29.808070833286973 71.19192916671302 13 50.5 13' +
            'C29.808070833286973 13 13 29.808070833286973 13 50.5C13 71.19192916671302 29.808070833286973 88 50.5 88Z'))).toBe(true)
    })

    test('op intersection', () => {
        const { path, path1 } = opcase();
        path.op(path1, OpType.Intersection);
        // console.log(path.toSVGString())
        expect(path.equals(new Path('M73.62989318592405 94.06406686253004C82.28153932637892 89.4097128601931 89.40971276765413 82.28153943847852 94.0640667942022 73.62989331293379' +
            'C92.03587227221678 70.04610119087596 88.57567094985656 67.37695422546793 84.46391385050369 66.40290335433512' +
            'C80.74217799861269 74.32747879185655 74.3274787060816 80.74217806701756 66.40290332156877 84.46391380716257' +
            'C67.37695418130508 88.57567087267265 70.04610112845467 92.03587220961002 73.62989318592405 94.06406686253004Z'))).toBe(true)
    })

    test('op xor', () => {
        const { path, path1 } = opcase();
        path.op(path1, OpType.Xor);
        // console.log(path.toSVGString())
        expect(path.equals(new Path('M50 100C58.543851685206164 100 66.59107665398336 97.85076171404083 73.62989318592405 94.06406686253004' +
            'C70.04610112845467 92.03587220961002 67.37695418130508 88.57567087267265 66.40290333389096 84.46391376420284C61.5734459361991 86.73204342730152 56.18321698725684 88 50.5 88' +
            'C29.808070833286973 88 13 71.19192916671302 13 50.5C13 29.808070833286973 29.808070833286973 13 50.5 13C71.19192916671302 13 88 29.808070833286973 88 50.5' +
            'C88 56.18321702579856 86.73204341010378 61.57344600930864 84.46391376101742 66.40290341982417C88.57567094985656 67.37695422546793 92.03587227221678 70.04610119087596 94.06406685749438 73.62989329046925' +
            'C97.85076168818667 66.59107675078712 100 58.54385173659512 100 50C100 22.4107611110493 77.58923888895069 0 50 0C22.4107611110493 0 0 22.4107611110493 0 50C0 77.58923888895069 22.4107611110493 100 50 100Z' +
            'M73.62989318592405 94.06406686253004C82.28153932637892 89.4097128601931 89.40971276765413 82.28153943847852 94.0640667942022 73.62989331293379C95.29634195363676 75.80730653579458 96 78.3223557711662 96 81' +
            'C96 89.2767716666852 89.2767716666852 96 81 96C78.32235574033282 96 75.80730647787242 95.29634193743135 73.62989318592405 94.06406686253004ZM66.40290332156877 84.46391380716257' +
            'C74.3274787060816 80.74217806701756 80.74217799861269 74.32747879185655 84.46391376101742 66.40290341982417C83.35179346499129 66.13944863068829 82.19200800224681 66 81 66' +
            'C72.7232283333148 66 66 72.7232283333148 66 81C66 82.19200797141343 66.13944862347412 83.35179340499151 66.40290332156877 84.46391380716257Z'))).toBe(true)
    })
})